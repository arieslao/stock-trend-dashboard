name: Evaluate & Calibrate (learn from past predictions)

on:
  schedule:
    # Run shortly after US market close (20:10 UTC ≈ 4:10pm ET). Adjust as needed.
    - cron: '10 20 * * 1-5'
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: evaluate-calibrate
  cancel-in-progress: false

jobs:
  evaluate_and_calibrate:
    runs-on: ubuntu-24.04

    env:
      # Sheet ID comes from repo secrets
      SHEET_ID: ${{ secrets.SHEET_ID }}

      # Sheets tabs — change if your tab names differ
      PRICES_TAB: prices
      PREDICTIONS_TAB: predictions
      EVAL_TAB: model_eval
      CALIBRATION_TAB: calibration

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Write Google service account JSON
        env:
          GOOGLE_SHEETS_JSON: ${{ secrets.GOOGLE_SHEETS_JSON }}
        run: |
          set -euxo pipefail
          echo "$GOOGLE_SHEETS_JSON" > "$RUNNER_TEMP/sa.json"
          mkdir -p "$HOME/.config/gspread"
          cp "$RUNNER_TEMP/sa.json" "$HOME/.config/gspread/service_account.json"
          python - <<'PY'
          import json, os
          for p in [os.path.join(os.environ["RUNNER_TEMP"], "sa.json"),
                    os.path.expanduser("~/.config/gspread/service_account.json")]:
              json.load(open(p))
              print("Service account JSON validated at:", p)
          PY

      - name: Configure Google credentials env var
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/sa.json" >> "$GITHUB_ENV"

      - name: Ensure required Sheets tabs exist
        run: |
          python - <<'PY'
          import os, gspread
          creds = os.environ["GOOGLE_APPLICATION_CREDENTIALS"]
          gc = gspread.service_account(filename=creds)
          sh = gc.open_by_key(os.environ["SHEET_ID"])

          need = [
            os.environ["PRICES_TAB"],
            os.environ["PREDICTIONS_TAB"],
            os.environ["EVAL_TAB"],
            os.environ["CALIBRATION_TAB"],
          ]
          existing = {ws.title for ws in sh.worksheets()}
          for t in need:
            if t not in existing:
              print("Creating missing worksheet:", t)
              sh.add_worksheet(title=t, rows=200, cols=26)
            else:
              print("Worksheet exists:", t)
          PY

      # 1) Score any past-due predictions using actuals from your prices tab
      - name: Evaluate past-due predictions
        run: |
          set -euxo pipefail
          python evaluate_predictions.py \
            --sheet-id "$SHEET_ID" \
            --predictions-worksheet "$PREDICTIONS_TAB" \
            --prices-worksheet "$PRICES_TAB" \
            --output-worksheet "$EVAL_TAB"

      # 2) Refresh calibration from history so future predictions use updated bias fixes
      - name: Update calibration from history
        run: |
          python calibrate_from_history.py \
            --sheet-id "$SHEET_ID" \
            --predictions-worksheet "$PREDICTIONS_TAB" \
            --calibration-worksheet "$CALIBRATION_TAB" \
            --lookback-days 60 \
            --min-samples 30

      - name: Upload logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evaluate-and-calibrate-logs
          path: |
            **/*.log
          if-no-files-found: ignore
