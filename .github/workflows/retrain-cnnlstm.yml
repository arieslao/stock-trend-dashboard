name: Nightly CNN-LSTM Train

on:
  schedule:
    - cron: "30 2 * * *"     # 02:30 UTC daily
  workflow_dispatch: {}

concurrency:
  group: model-artifacts
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  train:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo (full history so push works)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create service account JSON (temp)
        env:
          GOOGLE_SHEETS_JSON: ${{ secrets.GOOGLE_SHEETS_JSON }}
        run: |
          set -euxo pipefail
          echo "$GOOGLE_SHEETS_JSON" > "$RUNNER_TEMP/sa.json"
          python - <<'PY'
          import json, os
          p = os.path.join(os.environ["RUNNER_TEMP"], "sa.json")
          json.load(open(p))  # validate
          print("Service account JSON OK:", p)
          PY

      - name: Put service account at gspread default path
        env:
          GOOGLE_SHEETS_JSON: ${{ secrets.GOOGLE_SHEETS_JSON }}
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/.config/gspread"
          echo "$GOOGLE_SHEETS_JSON" > "$HOME/.config/gspread/service_account.json"
          python - <<'PY'
          import json, os
          p = os.path.expanduser("~/.config/gspread/service_account.json")
          json.load(open(p))
          print("Service account JSON OK at:", p)
          PY

      - name: Show train.py help (confirm flags)
        run: python train.py --help || true

      - name: Train CNN-LSTM from prices tab
        id: train
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/sa.json
          SHEET_ID: ${{ secrets.SHEET_ID }}
          WORKSHEET_NAME: watchlist_cnnlstm
          PRICES_TAB: prices
        run: |
          set -euxo pipefail
          LOG="$GITHUB_WORKSPACE/train_cnn_lstm.log"
          python train.py \
            --model cnn-lstm \
            --sheet-id "$SHEET_ID" \
            --worksheet "$WORKSHEET_NAME" \
            --symbol-column "Ticker" \
            --use-prices-tab \
            --prices-worksheet "$PRICES_TAB" \
            --period 10y \
            --interval 1d \
            2>&1 | tee "$LOG"

      # -------- Predict → Evaluate → Calibrate --------
      - name: Generate predictions (direction + targets) to 'predictions'
        if: steps.train.outcome == 'success'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/sa.json
          SHEET_ID: ${{ secrets.SHEET_ID }}
          WORKSHEET_NAME: watchlist_cnnlstm
          PRICES_TAB: prices
          PREDICTIONS_TAB: predictions
        run: |
          set -euxo pipefail
          python predict_cnn_lstm.py \
            --sheet-id "$SHEET_ID" \
            --worksheet "$WORKSHEET_NAME" \
            --symbol-column "Ticker" \
            --prices-worksheet "$PRICES_TAB" \
            --period 3y \
            --horizons 1,3,5,10,20 \
            --predictions-tab "$PREDICTIONS_TAB" \
            --apply-calibration

      - name: Evaluate matured predictions (fill actual, error_pct, direction_hit)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/sa.json
          SHEET_ID: ${{ secrets.SHEET_ID }}
          PRICES_TAB: prices
          PREDICTIONS_TAB: predictions
        run: |
          set -euxo pipefail
          python evaluate_predictions.py \
            --sheet-id "$SHEET_ID" \
            --predictions-worksheet "$PREDICTIONS_TAB" \
            --prices-worksheet "$PRICES_TAB"

      - name: Build per-symbol calibration from last 60 days
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/sa.json
          SHEET_ID: ${{ secrets.SHEET_ID }}
          PREDICTIONS_TAB: predictions
          CALIBRATION_TAB: model_calibration
        run: |
          set -euxo pipefail
          python calibrate_from_history.py \
            --sheet-id "$SHEET_ID" \
            --predictions-worksheet "$PREDICTIONS_TAB" \
            --calibration-worksheet "$CALIBRATION_TAB" \
            --lookback-days 60 \
            --min-samples 20

      - name: Upload training log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: train-cnnlstm-log
          path: ${{ github.workspace }}/train_cnn_lstm.log

      - name: Upload model artifacts
        if: steps.train.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: cnnlstm-model-${{ github.run_id }}
          path: |
            models/cnn_lstm_ALL.keras
            models/scaler_ALL.pkl

      - name: Commit model artifacts to main
        if: steps.train.outcome == 'success'
        env:
          BRANCH: main
        run: |
          set -euxo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Base our commit on latest remote main (avoids binary merge conflicts)
          git fetch origin $BRANCH
          git checkout -B $BRANCH origin/$BRANCH
          git add -f models/cnn_lstm_ALL.keras models/scaler_ALL.pkl || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Update CNN-LSTM weights ($(date -u +%F))"
          git push origin HEAD:$BRANCH
